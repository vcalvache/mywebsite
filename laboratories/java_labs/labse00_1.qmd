---
title: "Lab#SE00-1: Maven Person"
subtitle: Java SE Lab 02 part 1
author: vcalvache
date: "12/19/2022"
date-modified: last-modified
date-format: full
description:  Java SE Lab 02, part 1 work on the Model
categories: [javase, lab, composition, model]
toc: true
number-sections: true
format:
    html
---

## **Goal**

The goal of this project consist on creating different `Java Classes`, learn about `Composition` in Java Classes and `testing`.

___

## **Tasks**

::: {.labs}
ðŸ“˜ **Java SE Lab#SE00-1: Person**

1. Create a ``Maven/Gradle`` Java SE Project with the ``UML`` and classes defined below.

2. Add ``Lombok``, ``JUnit`` and ``Faker`` dependencies

3. Refactor: remove *boilerplate* code (getters, setters and so on) and work with ``Lombok``

4. Create ``Junit`` tests to test objects. Use ``Faker`` to create objects:

    1. Test ``createPerson``: check whether the object ``Person`` creation works properly. 
    2. Test ``createCar``: check whether the object ``Car`` creation works properly.
    3. Test ``createBook``: check whether the object ``Book`` creation works properly.
    4. Test ``createStudent``: check whether the object ``Student`` creation works properly
      1. Without **composition**: a ``Student`` object without car and books.
      1. With **composition**: a ``Student`` object with ``Car`` object and ``Book`` **List** objects

5. Create ``Junit`` tests to test operations:

    1. Test ``methodsPerson``: check that ``Person`` methods work properly: ``becomeOlder()``, ``killVampire()``, ``withFirstName()``

6. Improve ``Car``, ``Book`` and ``Author`` classes with two methods each.
:::

---

## UML

```{mermaid}
classDiagram
class Person {
  -firstname: String
  -lastname: String
  -age: int
}
class Student {
  -university: String
  -car: Car
  -books: ArrayList~Book~

}
class Author {
  -genre: String
  -book: Book
}

class Car{
    -places: int
    -color: String
}

class Book{
    -title: String
    -ISBN: String
    -pages: int
    -ahutor: Author
}
Person --|> Student: Inheritance
Person --|> Author: Inheritance
Student *-- Book: Composition
Book *-- Author: Composition
Student *-- Car: Composition
Author *-- Book: Composition
```

---

## Classes

### Person class
::: {.callout-note collapse="true"}
### Expand to reveal code

``` {.java .code-overflow-wrap filename="Person.java"}
package org.example;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class Person {
    private String firstName;
    private String lastName;
    private int age;

    private boolean isVampire = false;

    public Person (String firstName, String lastName){
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public Person (String firstName, String lastName, int age){
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
    }
```
:::

### Student class

::: {.callout-note collapse="true"}
### Expand to reveal code
``` {.java .code-overflow-wrap filename="Student.java"}
package org.example;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.ArrayList;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Student extends Person{
    private String university;
    private Car car;
    private ArrayList<Book> books;

    public Student(String firstName, String lastName, int age, String university){
        super(firstName, lastName, age);
        this.university = university;
        this.car = new Car();
        this.books = new ArrayList<>();
    }
}    
```
:::

### Student class without composition

::: {.callout-note collapse="true"}
### Expand to reveal code
``` {.java .code-overflow-wrap filename="StudentWithoutCompositon.java"}
package org.example;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class StudentWithoutComposition extends Person{
    private String university;

    public StudentWithoutComposition(String firstName, String lastName, int age, String university){
        super(firstName, lastName, age);
        this.university = university;
    }
}
```
:::

### Author class
::: {.callout-note collapse="true"}
### Expand to reveal code

``` {.java .code-overflow-wrap filename="Author.java"}
package org.example;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class Author extends Person{
    private String genre;
    private Book book;

    public Author (String firstName, String lastName, int age, String genere){
        super(firstName, lastName, age);
        this.genre = genere;
        this.book = new Book();
    }
}
```
:::

### Car class

::: {.callout-note collapse="true"}
### Expand to reveal code
``` {.java .code-overflow-wrap filename="Car.java"}
package org.example;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Car {
    private int seats;
    private int doors;
    private String color;

}
```
:::


### Book class

::: {.callout-note collapse="true"}
### Expand to reveal code

``` {.java .code-overflow-wrap filename="Book.java"}
package org.example;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Book {
    private String title;
    private String ISBN;
    private int pages;
    private Author author;

    public Book (String title, String ISBN, int pages){
        this.title = title;
        this.ISBN = ISBN;
        this.pages = pages;
        this.author = new Author();
    }
}    
```
:::

## New methods and testing

### Methods for Person class

::: {.callout-note collapse="true"}
### Expand to reveal code
```{.java .code-overflow-wrap filename="Person.java"}

   public Person withFirstName(String firstName){
        return new Person(firstName, lastName);
    }

    public Person witLastName(String lastName){
        return new Person(firstName, lastName);
    }

    public void becomeOlder(){
        this.age += 5;

        if (this.age >= 138){
            this.isVampire = true;
        }
    }

    public String askIfVampire(){
        if (this.isVampire == true){
            return "This person is a vampire!";
        } else {
            return "This is not a vampire";
        }
    }

    public void killVampire(Person person){
        if (this.isVampire == true){
            this.age = 0;
        }
    }
```
:::

#### Testing Person class methods

::: {.callout-note collapse="true"}
### Expand to reveal code

``` {.java .code-overflow-wrap filename="PersonClassTest.java"}
@Test
    public void becomeOlderTest(){
        Faker fake = new Faker();

        Person fakePerson = new Person(fake.name().firstName(), fake.name().lastName(),
                fake.number().numberBetween(1, 15));
        int originalAge = fakePerson.getAge();
        assertEquals(originalAge, fakePerson.getAge());
        fakePerson.becomeOlder();
        fakePerson.becomeOlder();
        fakePerson.becomeOlder();
        int newAge = originalAge + (5 * 3);
        assertEquals(newAge, fakePerson.getAge());
    }

    @Test
    public void askIfVampireTest(){
        Faker fake = new Faker();

        Person fakeVampire = new Person(fake.name().firstName(), fake.name().lastName(),
                fake.number().numberBetween(150, 200));
        fakeVampire.becomeOlder();
        assertEquals("This person is a vampire!", fakeVampire.askIfVampire());
    }

    @Test
    public void killVampireTest(){
        Faker fake = new Faker();

        Person fakeVampire = new Person(fake.name().firstName(), fake.name().lastName(),
                fake.number().numberBetween(150, 200));
        fakeVampire.becomeOlder();
        fakeVampire.killVampire();
        assertEquals(0, fakeVampire.getAge());
    }
 
```
:::

### New methods for Car class

::: {.callout-note collapse="true"}
### Expand to reveal code

``` {.java .code-overflow-wrap filename="car.java"}
public void getInTheCar() {
        if (passengers < seats) {
            this.passengers++;
        }
    }

    public String startTheCar(){
        if (passengers == seats){
            return "Let's drive!";
        } else {
            return "The car must be full to start driving";
        }
    }
 
```
:::

#### Testing Car Class methods


::: {.callout-note collapse="true"}
### Expand to reveal code

``` {.java .code-overflow-wrap filename="CarClassTest.java"}
@Test
    public void getInTheCarTest() {

        // Creating a new person object and passing all parameters
        Car fakeCar = new Car(4, 3, "Red");

        assertEquals(0, fakeCar.getPassengers());
        fakeCar.getInTheCar();
        assertEquals(1, fakeCar.getPassengers());
        fakeCar.getInTheCar();
        assertEquals(2, fakeCar.getPassengers());
        fakeCar.getInTheCar();
        assertEquals(3, fakeCar.getPassengers());
        fakeCar.getInTheCar();
        assertEquals(4, fakeCar.getPassengers());
        fakeCar.getInTheCar();
        assertNotEquals(5, fakeCar.getPassengers());

    }

    @Test
    public void startTheCarTest(){
        Car fakeCar = new Car(4, 3, "Red");

        for (int i = 0; i < fakeCar.getSeats(); i++){
            fakeCar.getInTheCar();
        }

        String isTheCarReady = fakeCar.startTheCar();
        assertEquals(isTheCarReady, fakeCar.startTheCar());
    }
 
```
:::


### New methods for Book class

::: {.callout-note collapse="true"}
### Expand to reveal code

``` {.java .code-overflow-wrap filename="Book.java"}
 
```
:::

#### Testing Book Class methods
TO-DO

### New methods for Author class

::: {.callout-note collapse="true"}
### Expand to reveal code

``` {.java .code-overflow-wrap filename="Author.java"}
 
```
:::

#### Testing Author Class methods
TO-DO