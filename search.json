[
  {
    "objectID": "javase.html",
    "href": "javase.html",
    "title": "Java SE",
    "section": "",
    "text": "Java was originally developed by James Gosling. It was released in May 1995.\nJava is a high-level, class-based, object-oriented programming language that is designed to have as few implementation dependencies as possible. It is a general-purpose programming language intended to let programmers write once, run anywhere (WORA).\nYou can install Java SE for free here:\nhttps://www.oracle.com/java/technologies/java-se-glance.html\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndata Type\nSize\nDescription\nDeclaration example\n\n\n\n\n\nbyte\n1 byte\nStores whole number from -128 to 127\nbyte variableName = value;\n\n\n\nshort\n2 bytes\nStores whole numbers from -32,768 to 32,767\nshort variableName = value;\n\n\n\nint\n4 bytes\nStores whole numbers from -2,147,483,648 to 2,147,483,647\nint variableName = value;\n\n\n\nlong\n8 bytes\nStores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807\nlong variableName = value;\n\n\n\nfloat\n4 bytes\nStores fractional numbers. Sufficient for storing 6 to 7 decimal digits\nfloat variableName = number.deciaml\n\n\n\ndouble\n8 bytes\nStores fractional numbers. Sufficient for storing 15 decimal digits\ndouble variableName = number.decimal\n\n\n\nboolean\n1 bit\nStores true or false values\nboolean variableName = true/false\n\n\n\nchar\n2 bytes\nStores a single character/letter or ASCII values\nchar varaibleName = ‘b’ or 98"
  },
  {
    "objectID": "labs.html",
    "href": "labs.html",
    "title": "vcalvache",
    "section": "",
    "text": "This section will gather different labs from the course."
  },
  {
    "objectID": "lab_se02_1.html",
    "href": "lab_se02_1.html",
    "title": "Lab#SE02-1: Movie/Review, Model",
    "section": "",
    "text": "The goal of this project consist on creating different Java classes to define the Model of a project based on Movie Reviews."
  },
  {
    "objectID": "lab_se02_1.html#tasks",
    "href": "lab_se02_1.html#tasks",
    "title": "Lab#SE02-1: Movie/Review, Model",
    "section": "2 Tasks",
    "text": "2 Tasks\n\nCreate a Java SE Project with Maven.\nAdd dependencies: + Junit + Java Faker + Lombok\nCreate the following Java classes:\n\nMovie: represents a movie that is going to be reviewed. Should have this attributes:\n\ntitle\nreviews\nCritic\n\nCritic: is the one who will write reviews. Their attributes:\n\nname\nReview\n\nReview: is written by the critic and belongs to the movie. Theis attributes:\n\nMovie\nCritic\nrating\ncomment\n\n\nCreate unitary tests wit Junit.\nAdd new feature once all the test are passed."
  },
  {
    "objectID": "lab_se02_1.html#adding-dependencies",
    "href": "lab_se02_1.html#adding-dependencies",
    "title": "Lab#SE02-1: Movie/Review, Model",
    "section": "3 Adding dependencies",
    "text": "3 Adding dependencies\nAfter creating the Maven project, the first step consist in adding the dependencies to the pom.xml project.\nThe desires dependencies can be found on the Maven Repository link:\nOn the code below, Junit, Lombok and Java Faker has been added.\n\n\npom.xml\n\n  <dependencies>\n    <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->\n    <dependency>\n      <groupId>org.projectlombok</groupId>\n      <artifactId>lombok</artifactId>\n      <version>1.18.26</version>\n      <scope>provided</scope>\n    </dependency>\n    <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->\n    <dependency>\n      <groupId>org.junit.jupiter</groupId>\n      <artifactId>junit-jupiter-api</artifactId>\n      <version>5.9.2</version>\n      <scope>test</scope>\n    </dependency>\n    <!-- https://mvnrepository.com/artifact/com.github.javafaker/javafaker -->\n    <dependency>\n      <groupId>com.github.javafaker</groupId>\n      <artifactId>javafaker</artifactId>\n      <version>1.0.2</version>\n    </dependency>\n\n  </dependencies>"
  },
  {
    "objectID": "lab_se02_1.html#first-uml",
    "href": "lab_se02_1.html#first-uml",
    "title": "Lab#SE02-1: Movie/Review, Model",
    "section": "4 First UML",
    "text": "4 First UML\nAs a first approach to start working on, the UML is based on the following rules:\n\nThe Movie Class is designed where an object movie can has different reviews.\nCritic create objects for the Review class of a movie object.\nThe Review class depends on the Critic class and belongs to a movie object.\n\nOn this design we can see that the Movie class will have a multiplicity with the Critic class (since a movie can be reviewed by different critics). Also, the Critic class will has a multiplicity relationship wit the review class because a critic object can has multiple reviews of different movies.\n\n\n\n\nclassDiagram\n  class Movie {\n    -title: String\n    -reviews: Set<Review>\n  }\n  class Critic {\n    -name: String\n  }\n  class Review {\n    -movie: Movie\n    -critic: Critic\n    -rating: int\n    -comment: String\n  }\n  Movie *-- Review\n  Review o-- Critic"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "This website has two main purposes:\n\nDocumentation for the Web App Developement course.\nUse the website as porftolio.\n\n\nUnder construction\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  }
]